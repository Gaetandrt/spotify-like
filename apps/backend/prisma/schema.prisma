generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DIRECT_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["next_auth", "public", "storage"]
}

model accounts {
  id                 String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         BigInt?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  userId             String? @db.Uuid
  users              users?  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId], map: "provider_unique")
  @@schema("next_auth")
}

model sessions {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expires      DateTime @db.Timestamptz(6)
  sessionToken String   @unique(map: "sessiontoken_unique")
  userId       String?  @db.Uuid
  users        users?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("next_auth")
}

model users {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String?         @unique(map: "email_unique")
  emailVerified DateTime?       @db.Timestamptz(6)
  image         String?
  accounts      accounts[]
  sessions      sessions[]
  user_playlist user_playlist[]

  @@schema("next_auth")
}

model verification_tokens {
  identifier String?
  token      String   @id
  expires    DateTime @db.Timestamptz(6)

  @@unique([token, identifier], map: "token_identifier_unique")
  @@schema("next_auth")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model album {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  track_list  String[] @db.Uuid
  artist_id   String?  @db.Uuid
  title       String
  description String?
  image_id    String?  @db.Uuid
  artist      artist?  @relation(fields: [artist_id], references: [id], onDelete: Cascade)
  objects     objects? @relation(fields: [image_id], references: [id], onDelete: SetDefault)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model artist {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  image_id   String   @default(dbgenerated("'4e417287-f829-4e2e-b461-550d5ba79533'::uuid")) @db.Uuid
  username   String   @unique
  first_name String
  last_name  String
  email      String
  album      album[]
  objects    objects  @relation(fields: [image_id], references: [id], onDelete: SetDefault)
  track      track[]

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model playlist {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  title       String
  description String?
  image_id    String?  @default(dbgenerated("'9966fad2-bdbb-48a8-9ecc-1d4492e788bf'::uuid")) @db.Uuid
  objects     objects? @relation(fields: [image_id], references: [id], onDelete: SetDefault)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model track {
  id                              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at                      DateTime @default(now()) @db.Timestamptz(6)
  artist_id                       String   @db.Uuid
  image_id                        String   @default(dbgenerated("'be5fcc5d-2e08-49db-b19f-3523f526a4f6'::uuid")) @db.Uuid
  title                           String
  source                          String   @db.Uuid
  artist                          artist   @relation(fields: [artist_id], references: [id], onDelete: Cascade)
  objects_track_image_idToobjects objects  @relation("track_image_idToobjects", fields: [image_id], references: [id], onDelete: SetDefault)
  objects_track_sourceToobjects   objects  @relation("track_sourceToobjects", fields: [source], references: [id], onDelete: Cascade)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_playlist {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  user_id     String   @db.Uuid
  track_list  String[] @db.Uuid
  title       String
  description String?
  image_id    String   @default(dbgenerated("'9966fad2-bdbb-48a8-9ecc-1d4492e788bf'::uuid")) @db.Uuid
  objects     objects  @relation(fields: [image_id], references: [id], onDelete: SetDefault)
  users       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model buckets {
  id                 String    @id
  name               String    @unique(map: "bname")
  owner              String?   @db.Uuid
  created_at         DateTime? @default(now()) @db.Timestamptz(6)
  updated_at         DateTime? @default(now()) @db.Timestamptz(6)
  public             Boolean?  @default(false)
  avif_autodetection Boolean?  @default(false)
  file_size_limit    BigInt?
  allowed_mime_types String[]
  owner_id           String?
  objects            objects[]

  @@schema("storage")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model migrations {
  id          Int       @id
  name        String    @unique @db.VarChar(100)
  hash        String    @db.VarChar(40)
  executed_at DateTime? @default(now()) @db.Timestamp(6)

  @@schema("storage")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model objects {
  id                            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  bucket_id                     String?
  name                          String?
  owner                         String?         @db.Uuid
  created_at                    DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at                    DateTime?       @default(now()) @db.Timestamptz(6)
  last_accessed_at              DateTime?       @default(now()) @db.Timestamptz(6)
  metadata                      Json?
  path_tokens                   String[]        @default(dbgenerated("string_to_array(name, '/'::text)"))
  version                       String?
  owner_id                      String?
  album                         album[]
  artist                        artist[]
  playlist                      playlist[]
  track_track_image_idToobjects track[]         @relation("track_image_idToobjects")
  track_track_sourceToobjects   track[]         @relation("track_sourceToobjects")
  user_playlist                 user_playlist[]
  buckets                       buckets?        @relation(fields: [bucket_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "objects_bucketId_fkey")

  @@unique([bucket_id, name], map: "bucketid_objname")
  @@index([name], map: "name_prefix_search")
  @@schema("storage")
}
